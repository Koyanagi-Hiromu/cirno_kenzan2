●●JInputライブラリのラッパー簡易版ver120318 @zndmch

●導入法（Eclipseの場合）
1.jinput.jarをプロジェクトにドラッグ＆ドロップして投入
2.jinput.jarを右クリックし、ビルド・パス→ビルド・パスに追加
3.jinput.jarと同じフォルダにjinput.jar以外のファイル（.dllファイルなど）をコピー
4.JInputWrapper.javaをプロジェクトにインポート

●使い方
void init()
はじめに一度だけ呼ぶ。ゲームパッド認識と初期化。

void upDate()
ゲームパッドのボタンおよび方向キー状態を更新する。

boolean[] getButton()
ボタン0～ボタン15までの16個のボタンの状態をboolean[16]として返す。

int getArrowX()
方向キー（パッドによってはスティック）のX軸状態を-1（←）,0,1（→）の値で返す。

int getArrowY()
方向キーのY軸状態を-1（↑）,0,1（↓）の値で返す。



●●KeyListenerアダプタ
KeyListenerを登録し、ゲームパッド操作に対応して擬似的にKeyEventを発生させるアダプタ。
上記の方法で先にJInputWrapperを導入し、使用可能にしておく。
すべてKeyListenerAdapterで制御できるので導入時はJInputWrapperをインポートする必要はない。

●使い方
void init()
はじめに一度だけ呼ぶ。JInputWrapperの初期化。

void setKeyConfig(int buttonID,int keyCode)
ボタン0～15を押した時に発生させる擬似KeyEventのKeyCodeを設定する。
例：ListenerAdapter.setKeyConfig(0, KeyEvent.VK_Z);
　　//ボタン0にZキーを対応させる

void setListener(KeyListener)
KeyListenerを登録する。

void setKeyIntervalA(int)
方向キーのキーリピート開始までの時間（フレーム数）を設定
デフォルト値5

void setKeyIntervalB(int)
ボタンのキーリピート開始までの時間（フレーム数）を設定
デフォルト値5

void setArrowSeparateMode(boolean)
trueにすると方向キーのX軸とY軸の入力イベントが同一フレーム内で発生しなくなる。
主に斜め入力で、キーボードと同等のタイミングでイベントが発生しないと不具合が生じる処理系で使用。

void frame()
フレーム毎の処理。ボタン・方向キー判定を行い、対応した擬似KeyEventを発生させる。





