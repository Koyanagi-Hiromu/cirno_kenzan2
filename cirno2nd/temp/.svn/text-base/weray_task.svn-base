満腹度バー
ステータス表示
「ダンジョンの名前」
　攻撃　触手で０　満腹度　経験値（ネクスト不要）
　防御　触手で０　力　　　

はい、いいえ

特殊部屋自体
　合成システム
　倉庫システム

オープニング画面
リザルト画面
特殊フロア

アニメーション

SEから切り取り 11/5
	private static int vol = 10;
	private static final int VOL_MAX=100;
	public static void ascVol(){
		vol+=10;
		if(vol>=VOL_MAX) vol = VOL_MAX;
		setVol(vol);
	}
	public static void dceVol(){
		vol-=10;
		if(vol<=0) vol = 0;
		setVol(vol);
	}
	/**
	 * 0.0〜1.0にすること
	 * @param v
	 */
	public static void setVol(double v){
		setVol( (int)(v*VOL_MAX));
	}
	public static void setVol(int v){
		vol = v;
		if(vol>VOL_MAX) vol = VOL_MAX;
		if(vol<0) vol = 0;
	}
	private FloatControl ctrl_vol;
	private Clip se;
	private int se_dummy = 0;
	private final String filename;
	private SE(String name){
		filename = "res/se/".concat(name).concat(".wav");
	}
	private static List<Clip> list = new ArrayList<Clip>(32);
	public void play(){
		if(vol==0) return;
		if(se==null||se.isOpen()==false){
			se = loadAudio();
			ctrl_vol = (FloatControl)se.getControl(FloatControl.Type.MASTER_GAIN);
			ctrl_vol.setValue(new Float(Math.log10((double)vol/VOL_MAX*2))*20);
		}
		if(se.isRunning()){
			se.stop();
			se.setFramePosition(0);
		}
		se.start();
	}
	/**
	 * 効果音の確保
	 */
	private Clip loadAudio() {
		if(list.size()==32){
			//While you can obtain any number of Clip instances, only 32 can be open at the same time.
			//This is a hard limitation of the engine; it can only mix 32 channels.
			list.get(0).close();
			list.remove(0);
		}
		Clip c = loadAudioInitializer();
		list.add(c);
		return c;
	}
	private Clip loadAudioInitializer() {
		Clip clip = null;
		try {
			while(true){
				AudioInputStream audio = AudioSystem.getAudioInputStream(new java.io.File(filename));
				DataLine.Info info = new DataLine.Info(Clip.class,audio.getFormat());
				clip = (Clip)AudioSystem.getLine(info);
				clip.open(audio);
				audio.close();
			}
		} catch (UnsupportedAudioFileException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (LineUnavailableException e) {
			e.printStackTrace();
		}

		return clip;
	}


Base_Creatureから切り取り。10/29

	/**
	 * viewに直結するフラッグ群。
	 */
	protected boolean flag_attack_ending,flag_special_attacking;
	/**
	 * view > Map > (here)
	 */
	public boolean upDate_drawThread() {
		if(attacking_direction!=null){
			if(flag_attack_ending){
				addDelt(attacking_direction,-MAP.MoveSpeed);
				if(delt.x==0&&delt.y==0){
					attacking_direction=null;
					flag_attack_ending=false;
				}
			}else{
				addDelt(attacking_direction,MAP.MoveSpeed);
				if(Math.abs(delt.x)>MAP.TILE_SIZE/2||Math.abs(delt.y)>MAP.TILE_SIZE/2){
					flag_attack_ending=true;
				}
			}
			return true;
		}else if(flag_special_attacking){
			upDate_drawThread_spacialAttacking();
			return true;
		}else if(flag_moving){
			int x=0,y=0;
			if(delt.x > 0) x=-1;
			else if(delt.x<0) x=1;
			if(delt.y > 0) y=-1;
			else if(delt.y<0) y=1;
			if(x==0&&y==0){
				flag_moving=false;
				return false;
			}
			System.out.println("moooooooooving");
			delt.translate(x*MAP.MoveSpeed,y*MAP.MoveSpeed);
			return true;
		}
		return false;
	}

	/**
	 * オーバーライドして使うこと
	 */
	private void upDate_drawThread_spacialAttacking() {
		// デフォルトでは動作なし。各クリーチャー毎に設定してください
		flag_special_attacking = false;
	}